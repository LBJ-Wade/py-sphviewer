#summary One-sentence summary of this page.

= Introduction =

With this project I would like to begin an useful tool for people that need to make nice smoothed particles plots in Python. In particular, I am interested in making nice renders of hydrodynamical SPH particles simulations of galaxy formation. If you are interested in understanding the things, please, take a look at the code, if you are not, I think the best way to learn how the Py-SPHViewer works is with an example:

= The first plot with Py-SPHViwer= 

Let's begin with an example. You can try it with Ipython:

Our first example will be to define a cube made of 1000 uniform random placed particles:

{{{
In [3]: import numpy as np
In [4]: pos = np.random.rand(3,1000)
}}}

If you plot the xy projection of these particles, you will look something like this:

{{{
In [5]: import matplotlib.pyplot as plt
In [6]: plt.plot(pos[0,:], pos[1,:], 'k.')
In [7]: plt.show()
}}}

http://py-sphviewer.googlecode.com/svn/wiki/1_small.png

Py-SPHViewer allows to make a nice rendered scene from the same set of particles by smoothing them. We use a kernel interpolation approach to compute the density in all space. It depends on the smoothing length of the particles (ie, the scale-length at which particles actually contribute to the density field), which can be computed by searching the n-th neighbor of each particle. There are several ways to define this smoothing length. Py-SPHViewer allows to use your proper computed smoothing length or it can be compute it for you.
In our first example, we have not the smoothing length of the particles, so, we will let Py-SPHViewer to compute it for us.

First of all, we have to import the Py-SPHViewer:

{{{
In [8]: import sphviewer
}}}
 

First, we have to instantiate the _scene class:

{{{
In [12]: image = sphviewer.scene(pos=pos, nb=4)
Building 3DTree...
Searching the  4 neighbors of each particle...
}}}

Note that we have specified the number of neighbors to determine the smoothing length of each particle. If you have your own smoothing length, you can add the parameters _hsml and _rho within the arguments of the _scene class. The density _rho can be computed by dividing the number of neighbors by the volume of a sphere that contains them. 

In our example, the smoothing length of particles was stored in image.hsml:

{{{ 
In [13]: print image.hsml
[ 0.08034742  0.07268853  0.09088171  0.13775313  0.06260065  0.10747829
  0.06289377  0.0796005   0.0685653   0.08242916  0.08881306  0.07933373
  0.10008779  0.11405679  0.10700619  0.09568022  0.07362304  0.09125923
  0.07645694  0.10395436  0.11061069  0.12284919  0.08033954  0.07882842
  0.10757437  0.08115865  ...]
}}}

Now, we have to define the parameters of the camera to take a photo. The parameters of the camera define the point at which the camera should look at 



= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages
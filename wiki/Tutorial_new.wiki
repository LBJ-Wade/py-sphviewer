#summary One-sentence summary of this page.

= Introduction =

I will assume that you have downloaded the package and everything is working well in your computer. I will also assume that you have usually work on Python. 

Please, be aware that in order for sphviewer to work, your system must have installed matplotlib, numpy, multiprocessing and scipy. 


= Structure of sphviewer=

Attending suggestions from Pablo Benitez Llambay, I modified completely the structure of sphviewer since the previous release (v 0.45). Please, do not use that version because it is deprecated and it will be not longer maintained anymore. 

The current release (v0.88) is structured as a package. There are different modules stores in a main directory. I think in this way it will be easier to maintain and to develop different branches in case it is necessary. 

sphviewer is divided in 4 different classes, which are represented in the following diagram:

http://py-sphviewer.googlecode.com/svn/wiki/figures/sphviewer_scheme.png

  # *sphviewer.Particles:* is the main class which stores the particles information and computes some of their properties which will be used later for making the image. 
  # *sphviewer.Camera:* is the main class which defines the parameters of the camera. 
  # *sphviewer.Scene:* Scene is the class that defines the link between the particles and the camera. In other words, it computes the Scene as seen from the camera point of view. 
  # *sphviewer.Render:* Render is the class that makes the final render. It takes the Scene and take a photo, which can be used later for making a movie.  

With this structure in mind we are going to make an image of a set of particles.

= How to use SPHViewer=

In order to understand how sphviewer works, let's make a disk with a radial density profile. We are going to use 10000 particles. In the next example we are going to use numpy, matplotlib and (of course) sphviewer:  

{{{
import numpy as np
import matplotlib.pyplot as plt
import sphviewer
}}}

Let's make a disk with a radial density profile embedded in an uniform density medium:

{{{
n1   = 10000
n2   = n1/3
r   = np.random.rand(n1)
phi = 2*np.pi*np.random.rand(n1)
x1 = r*np.cos(phi)
y1 = r*np.sin(phi)
z1  = 0.1*np.random.rand(n1)

x2 = -2+4*np.random.rand(n2)
y2 = -2+4*np.random.rand(n2)
z2 = -2+4*np.random.rand(n2)

x = np.append(x1, x2)
y = np.append(y1, y2)
z = np.append(z1, z2)
}}}

We can check how the distribution looks like:

{{{
plt.plot(x,y,'k.')
plt.xlim(-1,1)
plt.ylim(-1,1)
}}}

http://py-sphviewer.googlecode.com/svn/wiki/figures/disk_particles.png

Before continue, we have to assume some mass for the particles. We will assume that all particles have the same mass:

{{{
mass = np.ones(n1+n2)
}}}


Our goal is to render the particles with sphviewer. We are going to go through the steps faster; after that we will explain in more detail different features and details from each class we use. 

Steps for making a plot in sphviewer are basically 3:

  * Define the *Particles* of the Scene:

{{{
Particles = sphviewer.Particles(x,y,z,mass)
}}}

  * Define the *Scene* itself:

{{{
Scene = sphviewer.Scene(Particles)
}}}

  * *Render* the Scene:

{{{
Render = sphviewer.Render(Scene)
}}}

And this is everything you need to know for making a nice image :).
If we want to look at the final image we can use the set_image method from Render:

{{{
img = Render.get_image()
plt.show(img, origin='lower')
}}}


http://py-sphviewer.googlecode.com/svn/wiki/figures/first_image.png

Mmmm, we have to say that it does not look very well. What's going on? sphviewer have different tools that can help us to understand why the image does not look like as we expect. Because I think you are expecting results faster, I will give the recipe for getting a nice image from our Scene and after that I will stop in the details:
Let's improve the render:

{{{
Scene = sphviewer.Scene(Particles)
Scene.update_camera(r='infinity')
Render = sphviewer.Render(Scene)
Render.set_logscale()
img = Render.get_image()
extent = Render.get_extent()
plt.imshow(img, origin='lower',vmax=0.3, extent=extent)
}}}

http://py-sphviewer.googlecode.com/svn/wiki/figures/second_image.png

Which in my opinion is a pretty nice image. 

Now we are going to pay attention to the different steps we made in order to fully understand the structure of sphviewer and to know what we can do with it.

= sphviewer.Particles = 
 
= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages
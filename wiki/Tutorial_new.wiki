#summary One-sentence summary of this page.

= Introduction =

I will assume that you have downloaded the package and everything is working well in your computer. I will also assume that you have usually work on Python. 

Please, be aware that in order for sphviewer to work, your system must have installed matplotlib, numpy, multiprocessing and scipy. 


= Structure of sphviewer=

Attending suggestions from Pablo Benitez Llambay, I modified completely the structure of sphviewer since the previous release (v 0.45). Please, do not use that version because it is deprecated and it will be not longer maintained anymore. 

The current release (v0.88) is structured as a package. There are different modules stores in a main directory. I think in this way it will be easier to maintain and to develop different branches in case it is necessary. 

sphviewer is divided in 4 different classes, which are represented in the following diagram:

http://py-sphviewer.googlecode.com/svn/wiki/figures/sphviewer_scheme.png

  # *sphviewer.Particles:* is the main class which stores the particles information and computes some of their properties which will be used later for making the image. 
  # *sphviewer.Camera:* is the main class which defines the parameters of the camera. 
  # *sphviewer.Scene:* Scene is the class that defines the link between the particles and the camera. In other words, it computes the Scene as seen from the camera point of view. 
  # *sphviewer.Render:* Render is the class that makes the final render. It takes the Scene and take a photo, which can be used later for making a movie.  

With this structure in mind we are going to make an image of a set of particles.

= How to use SPHViewer=

In order to understand how sphviewer works, let's make a disk with a radial density profile. We are going to use 10000 particles. In the next example we are going to use numpy, matplotlib and (of course) sphviewer:  

{{{
import numpy as np
import matplotlib.pyplot as plt
import sphviewer
}}}

Let's make a disk with a radial density profile embedded in an uniform density medium:

{{{
n1   = 10000
n2   = n1/3
r   = np.random.rand(n1)
phi = 2*np.pi*np.random.rand(n1)
x1 = r*np.cos(phi)
y1 = r*np.sin(phi)
z1  = 0.1*np.random.rand(n1)

x2 = -2+4*np.random.rand(n2)
y2 = -2+4*np.random.rand(n2)
z2 = -2+4*np.random.rand(n2)

x = np.append(x1, x2)
y = np.append(y1, y2)
z = np.append(z1, z2)
}}}

We can check how the distribution looks like:

{{{
plt.plot(x,y,'k.')
plt.xlim(-1,1)
plt.ylim(-1,1)
}}}

http://py-sphviewer.googlecode.com/svn/wiki/figures/disk_particles.png

Before continue, we have to assume some mass for the particles. We will assume that all particles have the same mass:

{{{
mass = np.ones(n1+n2)
}}}


Our goal is to render the particles with sphviewer. We are going to go through the steps faster; after that we will explain in more detail different features and details from each class we use. 

Steps for making a plot in sphviewer are basically 3:

  * Define the *Particles* of the Scene:

{{{
Particles = sphviewer.Particles(x,y,z,mass)
}}}

  * Define the *Scene* itself:

{{{
Scene = sphviewer.Scene(Particles)
}}}

  * *Render* the Scene:

{{{
Render = sphviewer.Render(Scene)
}}}

And this is everything you need to know for making a nice image :).
If we want to look at the final image we can use the set_image method from Render:

{{{
img = Render.get_image()
plt.show(img, origin='lower')
}}}


http://py-sphviewer.googlecode.com/svn/wiki/figures/first_image.png

Mmmm, we have to say that it does not look very well. What's going on? sphviewer have different tools that can help us to understand why the image does not look like as we expect. Because I think you are expecting results faster, I will give the recipe for getting a nice image from our Scene and after that I will stop in the details:
Let's improve the render:

{{{
Scene = sphviewer.Scene(Particles)
Scene.update_camera(r='infinity')
Render = sphviewer.Render(Scene)
Render.set_logscale()
img = Render.get_image()
extent = Render.get_extent()
plt.imshow(img, origin='lower',vmax=0.3, extent=extent)
}}}

http://py-sphviewer.googlecode.com/svn/wiki/figures/second_image.png

Which in my opinion is a pretty nice image. 

Now we are going to pay attention to the different steps we made in order to fully understand the structure of sphviewer and to know what we can do with it.

= sphviewer.Particles = 
 
As we noted before, the *Particles* class stores the particles information that sphviewer need in order to define the Scene. The parameters of this class are:

*_sphviewer.Particles(self, xpos, ypos, zpos, mass, hsml=None, nb=32, verbose=False)_*

_xpos_,_ypos_,_zpos_ and _mass_ do not need explanation because we already saw what they actually are. Regarding _hsml_ and _nb_, they are optional parameters but they are needed in the internal structure of sphviewer. _hsml_ is an array that stores the smoothing lengths of the particles. Smoothing lengths are used in order to determine the contribution of each particle to the density field. There are different techniques for defining this quantity but we define it as the distance to the closer _nb_ neighbor. It is to say, in case _nb_ is 32, the smoothing lengths for each particles will be the distance to its 32 closer neighbor. 
There are many situations where you know the smoothing lengths of your particles. In such a case, all you have to do is to provide the array with the hsml. Nevertheless, in many situations we don't know the value of the _hsml_. In fact, in the previouse example we didn't know it and we left the _hsml_ as none. Particles class will compute the hsml by itself searching the distance to the closer _nb_ neighbor (which is 32 by default) as far as you left _hsml_ as None. 

*Be aware that the computation of the smoothing lengths for a huge amount of particles may be very expensive*


Particles object has its own methods for making life easier.

They can be divided into setting methods ans getting methods. Setting methods are useful for setting some property we forgot at the time where we made the object, or for changing the data stored in the object. They are:

  * set_pos()
  * set_mass()
  * set_hsml()
  * set_nb() 

On the other hand, the getting methods are useful for getting some information from the object, like the smoothing lengths in case we want to save them. They are:

  * get_pos()
  * get_mass()
  * get_hsml()
  * get_nb() 

Finally, in many situations we will be interested in looking the particles stored in the object without getting them. It can be done easily by using the _plot_ method:

  * plot('plane', axis=None, *kwargs)

where 'plane' is a reference to the 'xy', 'xz' or 'yz' projection and axis let us define the axis where we are going to plot the particles. 
The kwargs are _matplotlib.lines.Line2D_ properties:

= sphviewer.Scene =

= Details =
Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages
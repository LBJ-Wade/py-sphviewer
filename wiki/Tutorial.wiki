#summary One-sentence summary of this page.

= Introduction =

With this project I would like to start an useful tool for people that need to make nice smoothed particles plots on Python. In particular, I am interested in making nice renders of SPH simulations of galaxy formation. If you are interested in understanding how the code works, please take a look at the code itself. If you are not, I think the best way to learn how Py-SPHViewer works is by looking at an example:

= The first plot with Py-SPHViwer= 

Let's start with an example. You can test it with Ipython:

First, we will define a cube made of 1000 uniform random placed particles:

{{{
In [3]: import numpy as np
In [4]: pos = np.random.rand(3,1000)
}}}

If you plot the xy projection of these particles, you will see something like this:

{{{
In [5]: import matplotlib.pyplot as plt
In [6]: plt.plot(pos[0,:], pos[1,:], 'k.')
In [7]: plt.show()
}}}

http://py-sphviewer.googlecode.com/svn/wiki/1_small.png

Py-SPHViewer allows to make a nice rendered scene from the same set of particles by smoothing them. We use a kernel interpolation approach to compute the density in all space. It depends on the smoothing length of the particles (ie, the scale-length at which particles actually contribute to the density field), which can be computed by searching the n-th neighbor of each particle. There are several ways to define this smoothing length. Py-SPHViewer allows the use of your proper computed smoothing length or it can compute them for you.
In our first example, we have not the smoothing length of the particles, so, we will let Py-SPHViewer to compute them for us.

First, we have to import the Py-SPHViewer:

{{{
In [8]: import sphviewer
}}}
 

and then we have to instantiate the _scene class:

{{{
In [12]: image = sphviewer.scene(pos=pos, nb=4)
Building 3DTree...
Searching the  4 neighbors of each particle...
}}}

Note that we have specified the number of neighbors to determine the smoothing length of each particle. If you have your own smoothing length, you can add the parameters _hsml and _rho within the arguments of the _scene class. The density _rho can be computed by dividing the number of neighbors by the volume of a sphere that contains them. 

In our example, the smoothing length of the particles was stored in image.hsml:

{{{ 
In [13]: print image.hsml
[ 0.08034742  0.07268853  0.09088171  0.13775313  0.06260065  0.10747829
  0.06289377  0.0796005   0.0685653   0.08242916  0.08881306  0.07933373
  0.10008779  0.11405679  0.10700619  0.09568022  0.07362304  0.09125923
  0.07645694  0.10395436  0.11061069  0.12284919  0.08033954  0.07882842
  0.10757437  0.08115865  ...]
}}}

Now, we have to define the parameters of the camera to take a photo. Let us take a look at the help:

{{{
In [8]: image.camera_params?
Type:       instancemethod
String Form:<bound method scene.camera_params of <sphviewer.scene object at 0x4141290>>
File:       /home/alejandro/Desktop/sphviewer.py
Definition: image.camera_params(self, px=0.0, py=0.0, pz=0.0, r=100.0, theta=0.0, phi=0.0, zoom=1.0, res=1000)
Docstring:
Use camera_params to define the (px,py,pz) looking point of the camera,
distance "r" of the observer, the angles "theta" and "phi" of camera, the 
"zoom" and resolution of the image.

}}}

The parameters to be defined are:

|| *Parameter* || *Function* ||
||  px,py,pz   || fixed point at which camera points. ||
||  r          || distance of camera from (px,py,pz) fixed point. ||
||  theta, phi || spherical angles to manage the position of the camera. ||
||  zoom || Zoom of the camera. zoom = 1 by default and gives a Field of View (FOV) = 90ยบ. Note that you can change FOV only by setting this parameter. ||
|| res    || Number of pixels of the resulting image. With this paremeter you can set the "Mpx" of your camera. Note that the higher the resolution, the higher the processing time. ||

http://py-sphviewer.googlecode.com/svn/wiki/sphere.png

For our first example, we will set the camera parameters as follows:

{{{
In [11]: image.camera_params(px=0.5,py=0.5,pz=0.5,r=1.)
===============================
==== Parameters of camera: ====
(px,py,pz)           =  0.5 , 0.5 , 0.5
r                    =  1.0
theta                =  0.0
phi                  =  0.0
zoom                 =  1.0
res                  =  1000
================================

}}}

It is to say, we are looking at the center of the cube from a distance of 1.0. By default, the zoom and FOV of camera will be 1.0 and 90ยบ respectively. The size of the resulting image will be 1000 x 1000 pixels. 

Now, it is time for rendering the scene and getting its parameters ( like the matrix of the image and its size):

{{{
In [18]: dens, bins, extent = image.make_scene()
}}}

===============================
==== Parameters of camera: ====
(px,py,pz)           =  0.5 , 0.5 , 0.5
(xcam,ycam,zcam)     =  -0 , 0.0 , -1.0
r                    =  1.0
theta                =  0.0
phi                  =  0.0
zoom                 =  1.0
FOV                  =  90.0
res                  =  1000
================================

Nice. Let's take a look at the image:

{{{
In [23]: plt.imshow(np.log10(dens+1.), origin='lower')
In [24]: plt.show()
}}}

http://py-sphviewer.googlecode.com/svn/wiki/2.png

Congratulations! You have made a nice image! Now it is straight forward to make a nice Video like this: 

<wiki:video url="http://www.youtube.com/watch?v=ifzMh8MXgZ8" />

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages